# I know this probably looks a bit ugly, but it works and that's what fucking counts

###################
#Generate 
rrnorm <- c(-10, 0, 10, 100)
(output <- tibble(v1 = 1:40, v2 = 1:40, v3 = 1:40, v4 = 1:40))
for (i in seq_along(rrnorm)) {
  output[[i]] <- rnorm(n = 10, mean = rrnorm[[i]])
}
output

####################
#Write the lyrics to "99 bottles of beer on the wall"
a <- "X bottles of beer on the wall, X bottles of beer.\n Take one down, pass it around, Y bottles of beer on the wall.\n\n"
output <- tibble(x = rep(""), y = 99:0)
for (i in seq_along(output$x)) {
  output$x[[i]] <- a
  output$x[[i]] <- str_replace_all(output$x[[i]], "X", as.character(output$y[[i]]))
  output$x[[i]] <- str_replace_all(output$x[[i]], "Y", as.character(output$y[[i]]-1))
  if (str_detect(output$x[[i]], "\\D1 bottles")) {
    output$x[[i]] <- str_replace_all(output$x[[i]], "1 bottles", "1 bottle")
  }
  if (str_detect(output$x[[i]], "^0 bottles")) {
    output$x[[i]] <- str_replace_all(output$x[[i]], "Take one down.*\\n", "Go to the store and buy some more, 99 bottles of beer on the wall.")
  }
}
cat(output$x)

#################
#Find the number of days it takes to get a full deck of cards
num.simulations = 10000
deck <- 1:52
full.deck <- function(collected) all(deck %in% collected)
lengths = vector(,num.simulations)

for (i in 1:num.simulations)
{
  collected <- c()

  while(!full.deck(collected))
  {
    collected <- c(collected, sample(52,1)) 
  }
  lengths[i] = length(collected)
}    
summary(lengths)

###################
#My first motherfucking useful function
#Get a list of duplicates in a column that save to the global environment. Version 2 
#will include a way to make a list out of those saved results, maybe
one_col_dupes <- function(dataframe, ...) {
  dupe.list <- dataframe %>% 
    group_by_(...) %>%
    summarise(n = n()) %>%
    filter(n > 1)
  dupe.list <<- print(dupe.list)
  dupe.filter <<- print(semi_join(dataframe, dupe.list, by = ...))
}
one_col_dupes(test, "numbers")
}
dupes(test, "word")

#################
#Copy a certain formatting between lots of different ggplot graphs even if the underlying data changes

esi_colors <- c("#1A4B2B", "#437A37", "#5A0000", "#022434", "#737C74", "#BCBEB9", "#75937f") #list of custom (aka ESI) colors

esi_formatting <- 
  list(scale_fill_manual(values = esi_colors),
  theme(axis.text.x = element_text(size = 12, family = "Arial"),
        axis.text.y = element_text(size = 14, family = "Arial"),
        panel.border = element_rect(color = "black", linetype = "solid", fill = NA),
        axis.title = element_text(size = 18, face = "bold", family = "Arial"),
        axis.title.x = element_blank(), 
        axis.title.y = element_text(size = 16, family = "Arial"),
        legend.position = "none",
        title = element_text(size = 18),
        strip.text = element_text(size = 13, face = "bold", family = "Arial"),
        strip.background = element_blank(),
        panel.background = element_blank()))

#Then simply do `+ esi_formatting` to the ggplots
